import createFilename from "../helpers/createFilename.js";
import ClickupService from "../services/clickupService.js";
import GCPStorageService from "../services/gcpStorageService.js";
import GeminiService from "../services/geminiService.js";

export default class TicketController {
    constructor(fastify) {
        this.fastify = fastify;
        this.clickupService = new ClickupService(fastify.log);
        this.geminiService = new GeminiService(fastify.log);
        this.gcpStorageService = new GCPStorageService(fastify.log);
    }

    async categorizeTicket(request, reply) {
        try {
            const { task_id, history_items = [] } = request.body;
            
            let isFromOurAPI = history_items.some(item => 
                item.user && item.user.id === parseInt(process.env.CLICKUP_USER_ID)
            );
            
            if (isFromOurAPI) {
                return reply.code(200).send({ success: true, message: 'Event from own API ignored' });
            }
            
            if (!history_items.some(item => item.user)) {
                return reply.code(422).send({ success: false, message: 'event not generated by a user' });
            }
            
            let cacheKey = `ticket_${task_id}`;
            if (this.fastify.redis && await this.fastify.redis.has(cacheKey)) {
                return reply.code(200).send({ success: true, message: 'ticket already processed recently' });
            }
            
            // Resposta imediata para o webhook
            reply.code(202).send({ success: true, message: 'Processing...' });
            
            // Processamento assíncrono
            this.processTicketAsync(task_id, cacheKey).catch(error => {
                this.fastify.log.error('Async processing error:', error);
            });
            
        } catch (error) {
            this.fastify.log.error('Error processing webhook:', {
                error: error.message,
                task_id: request.body.task_id,
                timestamp: new Date().toISOString()
            });
            
            return reply.code(500).send({ 
                success: false, 
                message: 'Error processing webhook', 
                error: error.message 
            });
        }
    }

    async processTicketAsync(task_id, cacheKey) {
        try {
            if (this.fastify.redis) {
                await this.fastify.redis.set(cacheKey, true, 300000);
            }
            
            const ticket = await this.clickupService.getTicket(task_id);
            
            const isAlreadyProcessed = ticket.priority || (ticket.tags && ticket.tags.length > 0) || ticket.squad || ticket.origin;
            
            if (isAlreadyProcessed) {
                this.fastify.log.info(`Ticket already categorized: ${task_id}`);
                return;
            }
            
            let files = null;
            if (this.fastify.redis) {
                files = await this.fastify.redis.getFiles();
            }
            
            if (!files) {
                files = await this.gcpStorageService.getAllFiles();
                if (this.fastify.redis) {
                    await this.fastify.redis.saveFiles(files);
                }
            }

            const categorization = await this.geminiService.categorizeTicket(ticket, files);
            
            if (!categorization) {
                this.fastify.log.warn(`⚠️ Could not categorize ticket: ${task_id}`);
                return;
            }
            
            if (categorization.priority) {
                await this.clickupService.setPriority(task_id, { 
                    priority: categorization.priority 
                });
                this.fastify.log.info('✅ Priority updated:', {
                    task_id,
                    priority: categorization.priority
                });
            }
            
            if (categorization.tags?.[0]?.name) {
                await this.clickupService.addTagToTicket(
                    task_id, 
                    categorization.tags[0].name
                );
                this.fastify.log.info('✅ Tag added:', {
                    task_id,
                    tag: categorization.tags[0].name
                });
            }

            if (categorization.squad) {
                await this.clickupService.setCustomField(
                    task_id,
                    categorization.squad.field_id,
                    categorization.squad.value
                );
                this.fastify.log.info('✅ Squad updated:', {
                    task_id,
                    squad: categorization.squad.option.name
                });
            }

            if (categorization.origin) {
                await this.clickupService.setCustomField(
                    task_id,
                    categorization.origin.field_id,
                    categorization.origin.value
                );
                this.fastify.log.info('✅ Origin updated:', {
                    task_id,
                    origin: categorization.origin.option.name
                });
            }
                    
        } catch (error) {
            this.fastify.log.error('Error in async processing:', {
                error: error.message,
                task_id,
                timestamp: new Date().toISOString()
            });
        }
    }

    async saveTickets(request, reply) {
        try {
            const { id } = request.body;

            let tasks = await this.clickupService.getTickets(id);
            let list = await this.clickupService.getList(id);
    
            let filename = `${new Date().toISOString().replace(/[:.]/g, '-')}_${list.name}.json`;
            let uploadResult = await this.gcpStorageService.uploadFile(tasks, filename);
            
            // Calculate statistics
            const totalTasks = tasks.length;
            const tasksWithTags = tasks.filter(task => task.tags && task.tags.length > 0).length;
            const tasksWithoutTags = totalTasks - tasksWithTags;
            
            return reply.code(200).send({
                success: true,
                message: 'File uploaded to GCP Storage successfully!',
                data: {
                    list: {
                        id: id,
                        name: list?.name || 'Name not available',
                        totalTasks: totalTasks
                    },
                    file: {
                        filename: filename,
                        bucket: process.env.GOOGLE_CLOUD_BUCKET_NAME,
                        gcpPath: `${filename}`,
                        size: `${JSON.stringify(tasks).length} bytes`,
                        uploadResult: uploadResult
                    },
                    statistics: {
                        totalTasks: totalTasks,
                        tasksWithTags: tasksWithTags,
                        tasksWithoutTags: tasksWithoutTags
                    },
                    processingTime: new Date().toISOString()
                }
            });

        } catch (error) {
            this.fastify.log.error(`Processing error:`, error.message);
            
            return reply.code(500).send({ 
                success: false,
                message: 'Error processing and saving tasks',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    async health(request, reply) {
        const uptime = process.uptime();
        return reply.code(200).send({ 
            success: true, 
            message: 'Webhook is running',
            uptime: Math.floor(uptime),
            timestamp: new Date().toISOString()
        });
    }
}